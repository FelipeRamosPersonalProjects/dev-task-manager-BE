{
    "schemas": {
        "counters": "const Collection = require('@Collection');\r\nconst Config = require('@config');\r\nconst collectionName = Config.database.counterCollection;\r\n\r\nmodule.exports = new Collection({\r\n    name: collectionName,\r\n    symbol: 'CN',\r\n    displayName: 'Counters',\r\n    pluralLabel: 'Counters',\r\n    singularLabel: 'Counter',\r\n    excludeGlobals: ['cod', 'index'],\r\n    fieldsSet: [\r\n        {\r\n            fieldName: '_id',\r\n            type: String,\r\n            immutable: true,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'symbol',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'value',\r\n            type: Number,\r\n            default: 0\r\n        }\r\n    ]\r\n});\r\n",
        "auth_buckets": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'auth_buckets',\r\n    symbol: 'AUTH',\r\n    displayName: 'Auth Butckets',\r\n    pluralLabel: 'Auth Butckets',\r\n    singularLabel: 'Auth Butcket',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'rule',\r\n            type: String,\r\n            default: 'ANONYMOUS',\r\n            enum: ['ANONYMOUS', 'DEVELOPER', 'PROJECT-MANAGER', 'TECH-LEAD', 'MENTOR', 'ADMIN', 'MASTER']\r\n        },\r\n        {\r\n            fieldName: 'password',\r\n            type: Buffer\r\n        },\r\n        {\r\n            fieldName: 'gitHubToken',\r\n            type: Buffer\r\n        },\r\n        {\r\n            fieldName: 'jiraToken',\r\n            type: Buffer\r\n        },\r\n        {\r\n            fieldName: 'openAIToken',\r\n            type: Buffer\r\n        },\r\n        {\r\n            fieldName: 'user',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'auth',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "tickets": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\nconst { SLA } = require('./map');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'tickets',\r\n    symbol: 'TICK',\r\n    displayName: 'Tickets',\r\n    pluralLabel: 'tickets',\r\n    singularLabel: 'ticket',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'externalSource',\r\n            type: String,\r\n            default: 'jira',\r\n            enum: ['jira', 'github']\r\n        },\r\n        {\r\n            fieldName: 'jiraIssue',\r\n            type: Object\r\n        },\r\n        {\r\n            fieldName: 'externalKey',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'externalURL',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'assignedUsers',\r\n            type: [ObjectId],\r\n            required: true,\r\n            default: [],\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'tickets',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'space',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'space_desks',\r\n            refConfig: {\r\n                relatedField: 'tickets',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'project',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'tickets',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'title',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'status',\r\n            type: String,\r\n            default: 'FIRST-LOOK',\r\n            enum: [\r\n                'FIRST-LOOK',\r\n                'INVESTIGATION',\r\n                'ESTIMATION',\r\n                'DEVELOPMENT',\r\n                'PULL-REQUEST',\r\n                'VALIDATION',\r\n                'CLOSED',\r\n                'ABORTED',\r\n                'ON-HOLD'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'sla',\r\n            type: SLA,\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'estimations',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'estimations',\r\n            refConfig: {\r\n                type: 'ObjectId',\r\n                relatedField: 'ticket'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'tasks',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'comments',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'pullRequests',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'stashes',\r\n            type: [ObjectId],\r\n            ref: 'stashes',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'codeReviews',\r\n            type: [ObjectId],\r\n            ref: 'code_reviews',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'sfConfigs',\r\n            type: [ObjectId],\r\n            ref: 'sf_configs',\r\n            refConfig: {\r\n                relatedField: 'ticket',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "users": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'users',\r\n    symbol: 'U',\r\n    displayName: 'Users',\r\n    pluralLabel: 'Users',\r\n    singularLabel: 'User',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'auth',\r\n            type: ObjectId,\r\n            ref: 'auth_buckets',\r\n            refConfig: {\r\n                relatedField: 'user',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'slackName',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'userName',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'firstName',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'lastName',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'email',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'phone',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'gitHub',\r\n            type: Object\r\n        },\r\n        {\r\n            fieldName: 'jira',\r\n            type: Object\r\n        },\r\n        {\r\n            fieldName: 'repos',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'repos',\r\n            refConfig: {\r\n                relatedField: 'owner',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'spaceDesks',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'space_desks',\r\n            refConfig: {\r\n                relatedField: 'owner',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'tickets',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'assignedUsers',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'tasks',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'assignedUsers',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'myPullRequests',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'owner',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'myReviews',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'code_reviews',\r\n            refConfig: {\r\n                relatedField: 'reviewers',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'pullRequestsAssigned',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'assignedUsers',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'myComments',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'author',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'myOrganizations',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'organizations',\r\n            refConfig: {\r\n                relatedField: 'owner',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'stashes',\r\n            type: [ObjectId],\r\n            ref: 'stashes',\r\n            refConfig: {\r\n                relatedField: 'author',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "repos": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'repos',\r\n    symbol: 'REPO',\r\n    displayName: 'Repositiries',\r\n    pluralLabel: 'Repositiries',\r\n    singularLabel: 'Repositiry',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'nodeVersion',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'baseBranch',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'repoName',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'repoPath',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'localPath',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'url',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'owner',\r\n            type: ObjectId,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'repos',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'collaborators',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'repos',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'organization',\r\n            type: ObjectId,\r\n            ref: 'organizations',\r\n            refConfig: {\r\n                relatedField: 'repos',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'projects',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'repos',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'stashes',\r\n            type: [ObjectId],\r\n            ref: 'stashes',\r\n            refConfig: {\r\n                relatedField: 'repo',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'pullRequests',\r\n            type: [ObjectId],\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'repo',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "stashes": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'stashes',\r\n    symbol: 'STSH',\r\n    displayName: 'Stashs',\r\n    pluralLabel: 'Stashs',\r\n    singularLabel: 'Stash',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'author',\r\n            type: ObjectId,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'stashes',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'type',\r\n            type: String,\r\n            required: true,\r\n            enum: ['draft', 'bring', 'temp', 'backup', 'stash', 'stash-backup']\r\n        },\r\n        {\r\n            fieldName: 'title',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'branch',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'task',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'stashes',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'stashes',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'repo',\r\n            type: ObjectId,\r\n            ref: 'repos',\r\n            required: true,\r\n            refConfig: {\r\n                relatedField: 'stashes',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'backupFolder',\r\n            type: String\r\n        }\r\n    ]\r\n});\r\n",
        "projects": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\nconst TemplateOptionsMap = require('./map/TemplatesOptions');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'projects',\r\n    symbol: 'PRJ',\r\n    displayName: 'Projects',\r\n    pluralLabel: 'Projects',\r\n    singularLabel: 'Project',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'projectKey',\r\n            type: String,\r\n            required: true,\r\n            unique: true,\r\n            immutable: true\r\n        },\r\n        {\r\n            fieldName: 'projectName',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'urls',\r\n            type: Array,\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'tickets',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'project',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'tasks',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'project',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'repos',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'repos',\r\n            refConfig: {\r\n                relatedField: 'projects',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'spaceDesk',\r\n            type: ObjectId,\r\n            ref: 'space_desks',\r\n            refConfig: {\r\n                relatedField: 'projects',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'organization',\r\n            type: ObjectId,\r\n            ref: 'organizations',\r\n            refConfig: {\r\n                relatedField: 'projects',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'templates',\r\n            type: TemplateOptionsMap,\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'reviewers',\r\n            type: [ObjectId],\r\n            ref: 'users',\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'prLabels',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'labels',\r\n            refConfig: {\r\n                relatedField: 'projects',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "tasks": "const Collection = require('@Collection');\r\nconst DiscoveryTask = require('@src/schemas/map/Discovery.task');\r\nconst DevelopmentTask = require('@src/schemas/map/Development.task');\r\nconst ValidationTask = require('@src/schemas/map/Validation.task');\r\nconst TODOReminderTask = require('@src/schemas/map/TODOReminder.task');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'tasks',\r\n    symbol: 'TSK',\r\n    displayName: 'Tasks',\r\n    pluralLabel: 'Tasks',\r\n    singularLabel: 'Task',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'status',\r\n            type: String,\r\n            default: 'TO-INVESTIGATE',\r\n            enum: [\r\n                'TO-INVESTIGATE',\r\n                'UNDER-INVESTIGATION',\r\n                'ASK-TO-CLIENT',\r\n                'ASK-TO-TEAM',\r\n                'TO-REPLY-CLIENT',\r\n                'TO-TEST',\r\n                'DONE',\r\n                'ABORTED',\r\n                'ON-HOLD',\r\n                'TO-START-DEVELOPMENT',\r\n                'IN-DEVELOPMENT',\r\n                'BLOCKED',\r\n                'QUESTION-RAISED',\r\n                'ASK-TO-PM',\r\n                'TO-CREATE-PROOFS',\r\n                'BUG-DETECTED',\r\n                'SELF-TEST'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'taskType',\r\n            type: String,\r\n            required: true,\r\n            enum: [\r\n                'INVESTIGATION',\r\n                'DEVELOPMENT'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'isInternal',\r\n            type: Boolean,\r\n            require: true,\r\n            default: false\r\n        },\r\n        {\r\n            fieldName: 'source',\r\n            type: String,\r\n            default: 'jira',\r\n            enum: ['jira', 'github']\r\n        },\r\n        {\r\n            fieldName: 'taskVersion',\r\n            type: Number,\r\n            default: 1\r\n        },\r\n        {\r\n            fieldName: 'title',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'externalKey',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'externalURL',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'parentTask',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'subTasks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'subTasks',\r\n            type: [ObjectId],\r\n            ref: 'tasks',\r\n            default: [],\r\n            refConfig: {\r\n                relatedField: 'parentTask',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'project',\r\n            type: ObjectId,\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'tasks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'assignedUsers',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'tasks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'jiraIssue',\r\n            type: Object\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'tasks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'dueDate',\r\n            type: Date\r\n        },\r\n        {\r\n            fieldName: 'estimations',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'estimations',\r\n            refConfig: {\r\n                type: 'ObjectId',\r\n                relatedField: 'task'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'sharedWith',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'pullRequests',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'task',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'comments',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'task',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'configs',\r\n            type: [Object],\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'stashes',\r\n            type: [ObjectId],\r\n            ref: 'stashes',\r\n            refConfig: {\r\n                relatedField: 'task',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'repo',\r\n            type: ObjectId,\r\n            ref: 'repos',\r\n            refConfig: {\r\n                relatedField: 'tasks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'codeReviews',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'code_reviews',\r\n            refConfig: {\r\n                relatedField: 'devTask',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'sfConfigs',\r\n            type: [ObjectId],\r\n            ref: 'sf_configs',\r\n            refConfig: {\r\n                relatedField: 'task',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'discovery',\r\n            type: DiscoveryTask.toObject(),\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'development',\r\n            type: DevelopmentTask.toObject(),\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'validation',\r\n            type: ValidationTask.toObject(),\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'todo',\r\n            type: TODOReminderTask.toObject(),\r\n            default: {}\r\n        }\r\n    ]\r\n});\r\n",
        "comments": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'comments',\r\n    symbol: 'COMM',\r\n    displayName: 'Comments',\r\n    pluralLabel: 'comments',\r\n    singularLabel: 'comment',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'source',\r\n            type: String,\r\n            default: 'INTERNAL',\r\n            enum: ['GITHUB', 'JIRA', 'INTERNAL']\r\n        },\r\n        {\r\n            fieldName: 'commentType',\r\n            type: String,\r\n            required: true,\r\n            default: 'STANDARD',\r\n            enum: ['STANDARD', 'PR', 'REPLY', 'NOTE']\r\n        },\r\n        {\r\n            fieldName: 'body',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'author',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'myComments',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'parent',\r\n            type: ObjectId,\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'replies',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'replies',\r\n            type: ObjectId,\r\n            ref: 'comments'\r\n        },\r\n        {\r\n            fieldName: 'pullRequest',\r\n            type: ObjectId,\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'comments',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'comments',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'task',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'comments',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'codeReview',\r\n            type: ObjectId,\r\n            ref: 'code_reviews',\r\n            refConfig: {\r\n                relatedField: 'comments',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'thread',\r\n            type: ObjectId,\r\n            ref: 'threads',\r\n            refConfig: {\r\n                relatedField: 'parentComment',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'parentThread',\r\n            type: ObjectId,\r\n            ref: 'threads',\r\n            refConfig: {\r\n                relatedField: 'children',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'gitHub',\r\n            type: Object\r\n        }\r\n    ]\r\n});\r\n",
        "space_desks": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\nconst TemplateOptionsMap = require('./map/TemplatesOptions');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'space_desks',\r\n    symbol: 'SPDK',\r\n    displayName: 'SpaceDesks',\r\n    pluralLabel: 'SpaceDesks',\r\n    singularLabel: 'SpaceDesk',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'spaceName',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'jiraProject',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'jiraBaseURL',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'owner',\r\n            type: ObjectId,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'spaceDesks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'projects',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'spaceDesks',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'templates',\r\n            type: TemplateOptionsMap,\r\n            default: {}\r\n        }\r\n    ]\r\n});\r\n",
        "organizations": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'organizations',\r\n    symbol: 'ORG',\r\n    displayName: 'Organizations',\r\n    pluralLabel: 'Organizations',\r\n    singularLabel: 'Organization',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'name',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'owner',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'myOrganizations',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'repos',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'repos',\r\n            refConfig: {\r\n                relatedField: 'organization',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'projects',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'organization',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "logs": "const Collection = require('@Collection');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'logs',\r\n    symbol: 'LG',\r\n    displayName: 'Logs',\r\n    pluralLabel: 'Logs',\r\n    singularLabel: 'Log',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'type',\r\n            type: String,\r\n            required: true,\r\n            default: 'log',\r\n            enum: ['log', 'warn', 'error']\r\n        },\r\n        {\r\n            fieldName: 'read',\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        {\r\n            fieldName: 'name',\r\n            type: String,\r\n            default: 'UnkownError'\r\n        },\r\n        {\r\n            fieldName: 'code',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'groupedLogs',\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        {\r\n            fieldName: 'resource',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'message',\r\n            type: String, \r\n            default: ''\r\n        },\r\n        {\r\n            fieldName: 'stack',\r\n            type: String,\r\n            default: ''\r\n        },\r\n        {\r\n            fieldName: 'errorList',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'validationErrors',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'additionalData',\r\n            type: String,\r\n            default: '{}'\r\n        }\r\n    ]\r\n});\r\n",
        "threads": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'threads',\r\n    symbol: 'THRD',\r\n    displayName: 'Threads',\r\n    pluralLabel: 'Threads',\r\n    singularLabel: 'Thread',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'parentComment',\r\n            type: ObjectId,\r\n            ref: 'comment',\r\n            refConfig: {\r\n                relatedField: 'thread',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'children',\r\n            type: [ObjectId],\r\n            ref: 'comment',\r\n            refConfig: {\r\n                relatedField: 'parentThread',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "pull_requests": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\nconst FileChange = require('./map/FileChange');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'pull_requests',\r\n    symbol: 'PR',\r\n    displayName: 'Pull Requests',\r\n    pluralLabel: 'Pull Requests',\r\n    singularLabel: 'Pull Request',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'gitHubPR',\r\n            type: Object,\r\n            default: {}\r\n        },\r\n        {\r\n            fieldName: 'name',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'remoteID',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'state',\r\n            type: String,\r\n            default: 'OPEN',\r\n            enum: [\r\n                'OPEN',\r\n                'CLOSED'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'status',\r\n            type: String,\r\n            default: 'OPEN',\r\n            enum: [\r\n                'TO-CREATE-PR',\r\n                'OPEN',\r\n                'CLOSED',\r\n                'TO-CREATE-PR',\r\n                'FIXING-COMMENTS',\r\n                'TO-CHECK-COMMENTS',\r\n                'TO-REPLY-CLIENT',\r\n                'TO-FIX',\r\n                'WAITING-APPROVAL',\r\n                'MERGED',\r\n                'WAITING-MERGE',\r\n                'TO-PUSH-METADATA',\r\n                'ABORTED',\r\n                'ON-HOLD'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'prStage',\r\n            type: String,\r\n            required: true,\r\n            default: 'initialized',\r\n            enum: [\r\n                'initialized',\r\n                'branch-created',\r\n                'commit-created',\r\n                'compare-filled',\r\n                'changes-description-filled',\r\n                'published',\r\n                'pendingChanges',\r\n                'aborted',\r\n                'merged'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'isCurrentVersion',\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        {\r\n            fieldName: 'version',\r\n            type: Number,\r\n            required: true,\r\n            default: 1\r\n        },\r\n        {\r\n            fieldName: 'base',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'head',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'summary',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'fileChanges',\r\n            type: [FileChange],\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'owner',\r\n            type: ObjectId,\r\n            ref: 'users',\r\n            required: true,\r\n            refConfig: {\r\n                relatedField: 'pullRequests',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'assignedUsers',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'pullRequests',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'codeReviews',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'code_reviews',\r\n            refConfig: {\r\n                relatedField: 'pull_request',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'labels',\r\n            type: [String],\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'bmConfigs',\r\n            type: [Object],\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'comments',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'pullRequest',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'pullRequests',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'task',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'pullRequests',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "worklogs": "const Collection = require('@Collection');\r\nconst Logstamp = require('./map/Logstamp');\r\n\r\nmodule.exports = new Collection({\r\n    name: 'worklogs',\r\n    symbol: 'WORK',\r\n    displayName: 'Worklogs',\r\n    pluralLabel: 'worklogs',\r\n    singularLabel: 'worklog',\r\n    fieldsSet: [\r\n        {\r\n            type: String,\r\n            fieldName: 'status',\r\n            default: 'pending-worklog'\r\n        },\r\n        {\r\n            fieldName: 'startTime',\r\n            type: Date,\r\n            required: true,\r\n            default: Date.now\r\n        },\r\n        {\r\n            fieldName: 'endTime',\r\n            type: Date\r\n        },\r\n        {\r\n            fieldName: 'summedTime',\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'logstamps',\r\n            type: [Logstamp.toObject()]\r\n        }\r\n    ]\r\n});\r\n",
        "labels": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'labels',\r\n    symbol: 'LBL',\r\n    displayName: 'Labels',\r\n    pluralLabel: 'Labels',\r\n    singularLabel: 'Label',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'name',\r\n            type: String,\r\n            required: true\r\n        },\r\n        {\r\n            fieldName: 'projects',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'projects',\r\n            refConfig: {\r\n                relatedField: 'prLabels',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "code_reviews": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'code_reviews',\r\n    symbol: 'CORE',\r\n    displayName: 'Code Reviews',\r\n    pluralLabel: 'Code Reviews',\r\n    singularLabel: 'Code Review',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'status',\r\n            type: String,\r\n            default: 'to-create-pr',\r\n            enum: [\r\n                'TO-CREATE-PR',\r\n                'WAITING-APPROVAL',\r\n                'CHANGES-REQUESTED',\r\n                'APPROVED',\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'pullRequest',\r\n            type: ObjectId,\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'codeReviews',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'codeReviews',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'devTask',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'codeReviews',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'reviwer',\r\n            type: ObjectId,\r\n            required: true,\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'myReviews',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'reviwerComments',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'comments',\r\n            refConfig: {\r\n                relatedField: 'codeReview',\r\n                type: 'ObjectId'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "estimations": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'estimations',\r\n    symbol: 'ESTM',\r\n    displayName: 'Estimations',\r\n    pluralLabel: 'Estimations',\r\n    singularLabel: 'Estimation',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'status',\r\n            type: String,\r\n            default: 'TO-ESTIMATE',\r\n            enum: [\r\n                'TO-ESTIMATE',\r\n                'WAITING-APPROVAL',\r\n                'REJECTED',\r\n                'ESTIMATION-APPROVED',\r\n                'ABORTED',\r\n                'ASK-TO-CLIENT',\r\n                'REPLY-TO-CLIENT',\r\n                'ON-HOLD',\r\n                'CHANGES-REQUESTED',\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'type',\r\n            type: String,\r\n            default: 'DEV',\r\n            enum: ['DEV', 'CR'],\r\n            labels: {\r\n                'DEV': 'Development',\r\n                'CR': 'Changes Request'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'jiraIssue',\r\n            type: Object\r\n        },\r\n        {\r\n            fieldName: 'FE',\r\n            type: Number,\r\n            default: 0,\r\n            min: 0\r\n        },\r\n        {\r\n            fieldName: 'BE',\r\n            type: Number,\r\n            default: 0,\r\n            min: 0\r\n        },\r\n        {\r\n            fieldName: 'QA',\r\n            type: Number,\r\n            default: 0,\r\n            min: 0\r\n        },\r\n        {\r\n            fieldName: 'others',\r\n            type: Number,\r\n            default: 0,\r\n            min: 0\r\n        },\r\n        {\r\n            fieldName: 'unit',\r\n            type: String,\r\n            default: 'HOUR',\r\n            enum: ['MINUTE', 'HOUR', 'DAY', 'WEEK', 'MONTH', 'YEAR']\r\n        },\r\n        {\r\n            fieldName: 'title',\r\n            type: String,\r\n            default: 'Estimation'\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                type: 'array-oid',\r\n                relatedField: 'estimations'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'task',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                type: 'array-oid',\r\n                relatedField: 'estimations'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'assignedUsers',\r\n            type: [ObjectId],\r\n            default: [],\r\n            ref: 'users',\r\n            refConfig: {\r\n                relatedField: 'estimations',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "sf_configs": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'sf_configs',\r\n    symbol: 'SFCONF',\r\n    displayName: '',\r\n    pluralLabel: '',\r\n    singularLabel: '',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'type',\r\n            type: String,\r\n            default: 'SYSTEM-CUSTOM-PREFERENCES',\r\n            enum: ['SYSTEM-CUSTOM-PREFERENCES']\r\n        },\r\n        {\r\n            fieldName: 'customPreferenceType',\r\n            type: String,\r\n            default: 'SITE-PREFERENCE',\r\n            enum: ['SITE-PREFERENCE']\r\n        },\r\n        {\r\n            fieldName: 'configs',\r\n            type: [Object],\r\n            default: []\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'sfConfigs',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'task',\r\n            type: ObjectId,\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'sfConfigs',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n",
        "testing_steps": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'testing_steps',\r\n    symbol: 'TSTP',\r\n    displayName: '',\r\n    pluralLabel: '',\r\n    singularLabel: '',\r\n    fieldsSet: []\r\n});\r\n",
        "validations": "const Collection = require('@Collection');\r\nconst { ObjectId } = Collection.Types;\r\n\r\nmodule.exports = new Collection({\r\n    name: 'validations',\r\n    symbol: 'VALD',\r\n    displayName: 'Validations',\r\n    pluralLabel: 'Validations',\r\n    singularLabel: 'Validation',\r\n    fieldsSet: [\r\n        {\r\n            fieldName: 'title',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'description',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'instance',\r\n            type: String,\r\n            default: 'DEV',\r\n            enum: [\r\n                'DEV',\r\n                'STG',\r\n                'PROD'\r\n            ]\r\n        },\r\n        {\r\n            fieldName: 'reportSummary',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'conclusion',\r\n            type: String\r\n        },\r\n        {\r\n            fieldName: 'testingSteps',\r\n            type: [ObjectId],\r\n            ref: 'testing_steps',\r\n            refConfig: {\r\n                relatedField: 'validation',\r\n                type: 'ObjectId'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'ticket',\r\n            type: ObjectId,\r\n            ref: 'tickets',\r\n            refConfig: {\r\n                relatedField: 'validations',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'tasks',\r\n            type: [ObjectId],\r\n            ref: 'tasks',\r\n            refConfig: {\r\n                relatedField: 'validations',\r\n                type: 'array-oid'\r\n            }\r\n        },\r\n        {\r\n            fieldName: 'pullRequest',\r\n            type: ObjectId,\r\n            ref: 'pull_requests',\r\n            refConfig: {\r\n                relatedField: 'validations',\r\n                type: 'array-oid'\r\n            }\r\n        }\r\n    ]\r\n});\r\n"
    }
}
